#!/usr/bin/env python3
# =============================================================================
# damage_summary.py â€” GUI Display for Damage Logs
# BLOCK 1: Imports, Logger, Column Setup
# =============================================================================

import logging
import tkinter as tk
from tkinter import ttk
from typing import List, Dict, Any

log = logging.getLogger(__name__)

DAMAGE_COLUMNS = [
    "tick", "attacker", "victim", "weapon", "damage", "hitgroup", "hp_remaining", "armor_remaining"
]

COLUMN_ALIASES = {
    "tick": "Tick",
    "attacker": "Attacker",
    "victim": "Victim",
    "weapon": "Weapon",
    "damage": "Damage",
    "hitgroup": "Hit Group",
    "hp_remaining": "HP",
    "armor_remaining": "Armor"
}


# =============================================================================
# BLOCK 2: Damage Log Treeview Construction
# =============================================================================

def create_damage_summary_tab(parent_tab: ttk.Notebook, damage_data: List[Dict[str, Any]]):
    """
    Constructs the Damage Summary tab in the GUI.

    Args:
        parent_tab: Notebook to attach tab
        damage_data: List of parsed damage log entries
    """
    log.info("ðŸ’¥ Building Damage Summary tab...")

    frame = ttk.Frame(parent_tab)
    parent_tab.add(frame, text="ðŸ’¥ Damage Summary")

    tree = ttk.Treeview(frame, columns=DAMAGE_COLUMNS, show="headings", height=20)
    scroll_y = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=scroll_y.set)

    for col in DAMAGE_COLUMNS:
        header = COLUMN_ALIASES.get(col, col.title())
        width = 90 if col not in {"weapon", "attacker", "victim"} else 130
        tree.heading(col, text=header)
        tree.column(col, anchor="center", width=width)

    tree.grid(row=0, column=0, sticky="nsew")
    scroll_y.grid(row=0, column=1, sticky="ns")

    frame.grid_rowconfigure(0, weight=1)
    frame.grid_columnconfigure(0, weight=1)

    for entry in damage_data:
        values = [entry.get(col, "") for col in DAMAGE_COLUMNS]
        tree.insert("", "end", values=values)

    log.info(f"âœ… Loaded {len(damage_data)} damage entries into Treeview.")


# =============================================================================
# BLOCK 3: Optional Tick Selection Trace for Debugging
# =============================================================================

def bind_damage_tick_trace(tree: ttk.Treeview):
    """
    Bind Treeview row selection to console tick printout.
    Useful for syncing parser playback with GUI state.
    """
    def on_select(event):
        selected = tree.focus()
        if not selected:
            return
        values = tree.item(selected)["values"]
        tick = values[0] if values else None
        if tick:
            log.info(f"ðŸ’¥ Tick from selected damage row: {tick}")
            print(f"[DAMAGE TRACE] Tick: {tick}")

    tree.bind("<<TreeviewSelect>>", on_select)
