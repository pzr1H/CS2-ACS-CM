#!/usr/bin/env python3
"""
CS2 Schema Adapter - Clean Version
Handles data transformation and validation for CS2 analysis
"""

import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

log = logging.getLogger(__name__)

class SchemaAdapter:
    """CS2 Data Schema Adapter"""
    
    def __init__(self):
        self.schema_version = "v1.0"
        self.supported_formats = ["cs2_events", "demo_parser"]
    
    def adapt_cs2_data(self, data, source_format="cs2_events"):
        """Adapt CS2 data to standard schema"""
        try:
            if not isinstance(data, dict):
                log.warning("Input data is not a dictionary")
                return self._create_empty_structure()
            
            # Ensure required keys exist
            adapted_data = {
                "events": data.get("events", []),
                "playerStats": data.get("playerStats", []),
                "rounds": data.get("rounds", []),
                "schema_version": self.schema_version,
                "adapted_at": datetime.now().isoformat()
            }
            
            # Validate and clean player stats
            adapted_data["playerStats"] = self._validate_players(adapted_data["playerStats"])
            
            # Validate and clean rounds
            adapted_data["rounds"] = self._validate_rounds(adapted_data["rounds"])
            
            # Add GUI dropdowns
            adapted_data["playerDropdown"] = self._build_player_dropdown(adapted_data["playerStats"])
            adapted_data["roundDropdown"] = self._build_round_dropdown(adapted_data["rounds"])
            
            log.info(f"Schema adaptation complete: {len(adapted_data['events'])} events")
            return adapted_data
            
        except Exception as e:
            log.error(f"Schema adaptation failed: {e}")
            return self._create_empty_structure()
    
    def _create_empty_structure(self):
        """Create empty data structure"""
        return {
            "events": [],
            "playerStats": [],
            "rounds": [],
            "playerDropdown": ["All Players"],
            "roundDropdown": ["All Rounds"],
            "schema_version": self.schema_version,
            "adapted_at": datetime.now().isoformat()
        }
    
    def _validate_players(self, players):
        """Validate player statistics"""
        if not isinstance(players, list):
            return []
        
        validated = []
        for player in players:
            if not isinstance(player, dict):
                continue
            
            clean_player = {
                "steam_id64": str(player.get("steam_id64", "0")),
                "name": str(player.get("name", "Unknown")),
                "kills": int(player.get("kills", 0)),
                "deaths": int(player.get("deaths", 0)),
                "assists": int(player.get("assists", 0)),
                "damage": float(player.get("damage", 0.0)),
                "headshots": int(player.get("headshots", 0)),
                "score": int(player.get("score", 0))
            }
            
            # Calculate KD ratio
            if clean_player["deaths"] > 0:
                clean_player["kd_ratio"] = clean_player["kills"] / clean_player["deaths"]
            else:
                clean_player["kd_ratio"] = float(clean_player["kills"])
            
            validated.append(clean_player)
        
        return validated
    
    def _validate_rounds(self, rounds):
        """Validate round data"""
        if not isinstance(rounds, list):
            return []
        
        validated = []
        for round_data in rounds:
            if not isinstance(round_data, dict):
                continue
            
            clean_round = {
                "number": int(round_data.get("number", 1)),
                "start_tick": int(round_data.get("start_tick", 0)),
                "end_tick": int(round_data.get("end_tick", 1000))
            }
            
            validated.append(clean_round)
        
        return validated
    
    def _build_player_dropdown(self, players):
        """Build player dropdown options"""
        dropdown = ["All Players"]
        for player in players:
            name = player.get("name", "Unknown")
            dropdown.append(name)
        return dropdown
    
    def _build_round_dropdown(self, rounds):
        """Build round dropdown options"""
        dropdown = ["All Rounds"]
        for round_data in rounds:
            number = round_data.get("number", 1)
            dropdown.append(f"Round {number}")
        return dropdown
    
    def validate_schema(self, data):
        """Validate data against expected schema"""
        try:
            if not isinstance(data, dict):
                return False
            
            required_keys = ["events", "playerStats", "rounds"]
            for key in required_keys:
                if key not in data:
                    log.error(f"Missing required key: {key}")
                    return False
            
            return True
            
        except Exception as e:
            log.error(f"Schema validation failed: {e}")
            return False


# Global instance
schema_adapter = SchemaAdapter()

# Convenience functions
def adapt_data(data, source_format="cs2_events"):
    """Adapt CS2 data to standard schema"""
    return schema_adapter.adapt_cs2_data(data, source_format)

def validate_data(data):
    """Validate data against schema"""
    return schema_adapter.validate_schema(data)

# Export list
__all__ = ["SchemaAdapter", "schema_adapter", "adapt_data", "validate_data"]
