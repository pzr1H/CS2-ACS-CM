diff --git a/cs2_parser/stats_summary.py b/cs2_parser/stats_summary.py
index 0000000..0000000 100644
--- a/cs2_parser/stats_summary.py
+++ b/cs2_parser/stats_summary.py
@@ -1,7 +1,9 @@
-# cs2_parser/stats_summary.py – Advanced Stats Display for CS2 ACS GUI
+# cs2_parser/stats_summary.py – Advanced Stats Tab with Scouting Integration
+#!/usr/bin/env python3
+# Timestamp-TOP: 2025-07-12 23:45 EDT

-import tkinter as tk
-from tkinter import ttk
+import tkinter as tk
+from tkinter import ttk
+import logging

+from .round_utils import to_steam2
+from .stats_builder import compute_stats, steamid64_to_steam2

 log = logging.getLogger(__name__)
 
 
@@ -9,7 +11,34 @@ def display_stats_summary(frame: ttk.Frame, data: dict, round_index: int = None) -> None:
     # clear old UI
     for widget in frame.winfo_children():
         widget.destroy()
-
-    stats = data.get('advancedStats', {})
-    players = data.get('playerStats', [])
+    # 1) pick slice
+    if round_index is not None and 'statsByRound' in data:
+        block = data['statsByRound'].get(round_index, {})
+        players  = block.get('playerStats', []) or []
+        stats    = block.get('advancedStats', {}) or {}
+    else:
+        players  = data.get('playerStats', []) or []
+        stats    = data.get('advancedStats', {})   or {}
+
+    scoutStats = data.get('scoutStats', {}) or {}
+
+    # 2) build name_map via dropdown + scout persona
+    name_map = {}
+    for p in data.get('playerDropdown', []):
+        sid64 = p.get('steamid64')
+        nm    = p.get('name')
+        if sid64 and nm:
+            try:
+                s2 = steamid64_to_steam2(sid64)
+            except:
+                s2 = str(sid64)
+            name_map[s2] = nm
+    for s2,v in scoutStats.items():
+        if v.get('persona_name'):
+            name_map[s2] = v['persona_name']
+
+    log.debug(f"Stats summary keys: {[p.get('player') for p in players]}")
+
+    # 3) setup columns
     cols = ['Player', 'Kills', 'Deaths', 'ADR', 'HS%', 'Reaction', 'CSR', 'Spray', 'Utility']
+    if scoutStats:
+        cols += ['VAC', 'GameBans', 'Hours', 'CheatCom', 'Likelihood']
 
     # render
     tree = ttk.Treeview(frame, columns=cols, show='headings')
@@ -17,10 +46,46 @@ def display_stats_summary(frame: ttk.Frame, data: dict, round_index: int = None) -> None:
     tree.pack(fill='both', expand=True)
 
     # 4) rows
-    for p in players:
-        pid  = p.get('steamid64')
-        nm   = p.get('name')
-        s    = stats.get(pid, {})
-        row  = [
-            nm,
-            p.get('Kills',0),
-            p.get('Deaths',0),
-            f"{p.get('ADR',0):.1f}",
-            f"{s.get('hs_percent',0):.1f}",
-            f"{s.get('reaction_time',0):.2f}",
-            f"{s.get('csr',0):.2f}",
-            s.get('spray_dispersion',0),
-            s.get('utility_damage',0),
-        ]
-        tree.insert('', 'end', values=row)
+    for p in players:
+        # basic
+        steam2 = p.get('player') or ''
+        nm     = name_map.get(steam2, steam2)
+        k      = p.get('Kills', 0)
+        d      = p.get('Deaths',0)
+        adr    = p.get('ADR', 0.0)
+        adv    = stats.get(steam2, {})
+
+        row = [
+            nm,
+            k,
+            d,
+            f"{adr:.1f}",
+            f"{adv.get('HS%',0.0):.1f}",
+            f"{adv.get('RT(s)',0.0):.2f}",
+            f"{adv.get('CSR',0.0):.2f}",
+            adv.get('Spray D',0),
+            adv.get('Utility',0),
+        ]
+
+        # scout
+        if scoutStats:
+            s = scoutStats.get(steam2, {})
+            row += [
+                'Yes' if s.get('vac_banned')          else 'No',
+                s.get('game_bans', 0),
+                f"{s.get('hours_played_cs2',0.0):.1f}",
+                s.get('cheating_comments_count',0),
+                compute_cheater_likelihood(s),
+            ]
+
+        tree.insert('', 'end', values=row)
+
+    return tree
+
+# Timestamp-EOF: 2025-07-12 23:45 EDT
+# EOF pzr1H 163ln – integrated per‐round, name mapping, scout stats
